{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNz1j0i8INGomAnmHIzjrYt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Josue-Martinez10/Dev2/blob/main/ML%20Basics%20Refurbished\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UE1BbJasqt3_",
        "outputId": "0523c935-7236-4ef7-e2bc-1462139793e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted price for a 1,655 sq ft house in the zipcode location 95121: $1,359,391.02\n",
            "\n",
            "Model Coefficients:\n",
            "location_94536: -105894.88\n",
            "location_95050: 156373.87\n",
            "location_95121: -50478.99\n",
            "square_footage: -177.92\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "#https://www.zillow.com/san-jose-ca-95121/?utm_medium=cpc&utm_source=google&utm_content=12581678795|124921362372|kwd-298676009707|507901519868|&semQue=null&utm_campaign=zbw_br_natip_usa_ht_nat_x_e_g_1&gad_source=1&gad_campaignid=12581678795&gbraid=0AAAAADhq15cqT2Y48ufrLlMHkJm1FfauH&gclid=Cj0KCQjw8p7GBhCjARIsAEhghZ3A-RXTT7_UBLkEWdvz61nKttphjHYdaWMybt3g4INvwm5y37gU81AaAo2-EALw_wcB&searchQueryState=%7B%22isMapVisible%22%3Atrue%2C%22mapBounds%22%3A%7B%22north%22%3A37.32274239505959%2C%22south%22%3A37.28280238778021%2C%22east%22%3A-121.76896561346435%2C%22west%22%3A-121.84664238653563%7D%2C%22filterState%22%3A%7B%22sort%22%3A%7B%22value%22%3A%22globalrelevanceex%22%7D%7D%2C%22isListVisible%22%3Atrue%2C%22mapZoom%22%3A15%2C%22usersSearchTerm%22%3A%2295121%22%2C%22regionSelection%22%3A%5B%7B%22regionId%22%3A97989%2C%22regionType%22%3A7%7D%5D%7D\n",
        "#https://www.zillow.com/santa-clara-ca-95050/?utm_medium=cpc&utm_source=google&utm_content=12581678795|124921362372|kwd-298676009707|507901519868|&semQue=null&utm_campaign=zbw_br_natip_usa_ht_nat_x_e_g_1&gad_source=1&gad_campaignid=12581678795&gbraid=0AAAAADhq15cqT2Y48ufrLlMHkJm1FfauH&gclid=Cj0KCQjw8p7GBhCjARIsAEhghZ3A-RXTT7_UBLkEWdvz61nKttphjHYdaWMybt3g4INvwm5y37gU81AaAo2-EALw_wcB&searchQueryState=%7B%22isMapVisible%22%3Atrue%2C%22mapBounds%22%3A%7B%22north%22%3A37.388685222498914%2C%22south%22%3A37.308922369463005%2C%22east%22%3A-121.91119194415283%2C%22west%22%3A-121.98869705584717%7D%2C%22filterState%22%3A%7B%22sort%22%3A%7B%22value%22%3A%22globalrelevanceex%22%7D%7D%2C%22isListVisible%22%3Atrue%2C%22mapZoom%22%3A14%2C%22usersSearchTerm%22%3A%2295050%22%2C%22regionSelection%22%3A%5B%7B%22regionId%22%3A97951%2C%22regionType%22%3A7%7D%5D%7D\n",
        "#https://www.zillow.com/fremont-ca-94536/?utm_medium=cpc&utm_source=google&utm_content=12581678795|124921362372|kwd-298676009707|507901519868|&semQue=null&utm_campaign=zbw_br_natip_usa_ht_nat_x_e_g_1&gad_source=1&gad_campaignid=12581678795&gbraid=0AAAAADhq15cqT2Y48ufrLlMHkJm1FfauH&gclid=Cj0KCQjw8p7GBhCjARIsAEhghZ3A-RXTT7_UBLkEWdvz61nKttphjHYdaWMybt3g4INvwm5y37gU81AaAo2-EALw_wcB&searchQueryState=%7B%22isMapVisible%22%3Atrue%2C%22mapBounds%22%3A%7B%22north%22%3A37.646696191695504%2C%22south%22%3A37.48763569817559%2C%22east%22%3A-121.90813988830566%2C%22west%22%3A-122.06315011169433%7D%2C%22filterState%22%3A%7B%22sort%22%3A%7B%22value%22%3A%22globalrelevanceex%22%7D%7D%2C%22isListVisible%22%3Atrue%2C%22mapZoom%22%3A13%2C%22usersSearchTerm%22%3A%2294536%22%2C%22regionSelection%22%3A%5B%7B%22regionId%22%3A97743%2C%22regionType%22%3A7%7D%5D%7D\n",
        "#https://chatgpt.com/ , Used this to expand my data points from zillow\n",
        "data = {\n",
        "    'square_footage': [\n",
        "        1234, 1044, 1327, 1648, 1296, 1700, 1430, 2766, 1575, 1467, 936, 2240,\n",
        "        1200, 1060, 1350, 1600, 1280, 1725, 1450, 2800, 1580, 1500, 950, 2200,\n",
        "        1190, 1080, 1345, 1620, 1270, 1690, 1475, 2740, 1555, 1490, 925, 2260,\n",
        "        1245, 1025, 1300, 1655, 1310, 1685, 1410, 2700, 1590, 1480, 940, 2220,\n",
        "        1250, 1075, 1335, 1670, 1265, 1715, 1440, 2765, 1560, 1460, 930, 2255,\n",
        "        1210, 1055, 1360, 1610, 1305, 1730, 1425, 2780, 1570, 1470, 945, 2235,\n",
        "        1225, 1090, 1315, 1635, 1290, 1705, 1435, 2720, 1585, 1455, 935, 2215,\n",
        "        1180, 1005, 1380\n",
        "    ],\n",
        "    'location': [\n",
        "        95050, 95050, 95050, 95050, 95121, 95121, 95121, 95121, 94536, 94536, 94536, 94536,\n",
        "        95050, 95050, 95050, 95050, 95121, 95121, 95121, 95121, 94536, 94536, 94536, 94536,\n",
        "        95050, 95050, 95050, 95050, 95121, 95121, 95121, 95121, 94536, 94536, 94536, 94536,\n",
        "        95050, 95050, 95050, 95050, 95121, 95121, 95121, 95121, 94536, 94536, 94536, 94536,\n",
        "        95050, 95050, 95050, 95050, 95121, 95121, 95121, 95121, 94536, 94536, 94536, 94536,\n",
        "        95050, 95050, 95050, 95050, 95121, 95121, 95121, 95121, 94536, 94536, 94536, 94536,\n",
        "        95050, 95050, 95050, 95050, 95121, 95121, 95121, 95121, 94536, 94536, 94536, 94536,\n",
        "        95050, 95050, 95050\n",
        "    ],\n",
        "    'price': [\n",
        "        1748000, 1688888, 1288000, 1798000, 1235000, 999999, 2488000, 340000, 1298000, 1598000, 450000, 1799000,\n",
        "        1725000, 1670000, 1305000, 1810000, 1250000, 1020000, 2500000, 355000, 1280000, 1580000, 460000, 1780000,\n",
        "        1750000, 1695000, 1290000, 1788000, 1240000, 1010000, 2495000, 345000, 1300000, 1600000, 455000, 1770000,\n",
        "        1730000, 1665000, 1310000, 1800000, 1260000, 995000, 2470000, 360000, 1295000, 1585000, 448000, 1805000,\n",
        "        1740000, 1680000, 1320000, 1820000, 1238000, 1005000, 2483000, 350000, 1285000, 1570000, 470000, 1795000,\n",
        "        1720000, 1675000, 1330000, 1799000, 1258000, 1015000, 2510000, 342000, 1278000, 1590000, 465000, 1765000,\n",
        "        1760000, 1690000, 1308000, 1808000, 1245000, 1000000, 2460000, 330000, 1302000, 1605000, 440000, 1810000,\n",
        "        1735000, 1660000, 1340000\n",
        "    ]\n",
        "}\n",
        "\n",
        "\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "X = df[['square_footage', 'location']]\n",
        "y = df['price']\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "transformers=[\n",
        "('location', OneHotEncoder(sparse_output=False), ['location'])\n",
        "], remainder='passthrough')\n",
        "\n",
        "model = Pipeline(steps=[\n",
        "('preprocessor', preprocessor),\n",
        "('regressor', LinearRegression())\n",
        "])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n",
        "random_state=42)\n",
        "\n",
        "\n",
        "\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "new_house = pd.DataFrame({'square_footage': [1655], 'location': [95121]})\n",
        "predicted_price = model.predict(new_house)\n",
        "print(f\"Predicted price for a 1,655 sq ft house in the zipcode location 95121: ${predicted_price[0]:,.2f}\")\n",
        "\n",
        "feature_names = (model.named_steps['preprocessor']\n",
        ".named_transformers_['location']\n",
        ".get_feature_names_out(['location'])).tolist() + \\\n",
        "['square_footage']\n",
        "coefficients = model.named_steps['regressor'].coef_\n",
        "print(\"\\nModel Coefficients:\")\n",
        "for feature, coef in zip(feature_names, coefficients):\n",
        "    print(f\"{feature}: {coef:.2f}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "#Source is from an educated guess of the busines world, since I couldn't find a realistic dataset\n",
        "# then i used https://chatgpt.com/ to expand the data set\n",
        "data = {\n",
        "    'age': [\n",
        "        40, 84, 18, 28, 72, 56, 21, 22, 61, 35,\n",
        "        43, 81, 19, 30, 74, 59, 23, 20, 64, 36,\n",
        "        41, 79, 20, 27, 70, 53, 25, 24, 60, 34,\n",
        "        42, 83, 22, 26, 71, 58, 26, 23, 62, 33,\n",
        "        44, 82, 21, 29, 73, 55, 27, 25, 63, 32,\n",
        "        45, 80, 24, 31, 75, 57, 28, 22, 65, 38,\n",
        "        46, 78, 26, 33, 76, 54, 29, 26, 66, 37,\n",
        "        47, 77, 27, 34, 77, 56, 30, 28, 67, 39,\n",
        "        48, 76, 23, 35, 78\n",
        "    ],\n",
        "    'monthly_usage_hours': [\n",
        "        15, 66, 58, 78, 88, 10, 34, 42, 50, 42,\n",
        "        16, 64, 56, 80, 85, 11, 33, 40, 52, 44,\n",
        "        17, 67, 59, 77, 89, 12, 35, 43, 51, 41,\n",
        "        14, 65, 57, 79, 87, 13, 36, 45, 49, 40,\n",
        "        18, 68, 60, 76, 90, 9, 37, 44, 48, 39,\n",
        "        19, 69, 61, 75, 91, 8, 38, 46, 47, 38,\n",
        "        20, 70, 62, 74, 92, 7, 39, 47, 46, 37,\n",
        "        21, 71, 63, 73, 93, 6, 40, 48, 45, 36,\n",
        "        22, 72, 64, 72, 94\n",
        "    ],\n",
        "    'purchase_amount': [\n",
        "        300, 220, 100, 90, 250, 190, 145, 90, 200, 50,\n",
        "        290, 210, 110, 85, 240, 180, 140, 95, 210, 60,\n",
        "        295, 215, 105, 92, 245, 185, 135, 88, 205, 55,\n",
        "        298, 225, 108, 86, 242, 182, 138, 91, 208, 58,\n",
        "        285, 230, 107, 87, 247, 178, 133, 89, 202, 57,\n",
        "        275, 235, 102, 93, 252, 176, 132, 87, 198, 53,\n",
        "        265, 240, 101, 95, 255, 174, 130, 90, 196, 52,\n",
        "        270, 245, 103, 97, 258, 172, 128, 92, 194, 51,\n",
        "        260, 250, 99, 98, 262\n",
        "    ],\n",
        "    'customer_service_calls': [\n",
        "        2, 3, 8, 5, 2, 3, 9, 3, 0, 1,\n",
        "        2, 4, 7, 6, 3, 2, 8, 2, 1, 1,\n",
        "        3, 3, 6, 5, 2, 4, 7, 3, 0, 2,\n",
        "        1, 2, 9, 4, 3, 2, 6, 3, 1, 2,\n",
        "        4, 5, 5, 5, 2, 3, 8, 4, 0, 1,\n",
        "        2, 4, 7, 4, 3, 2, 7, 4, 1, 0,\n",
        "        1, 3, 6, 5, 3, 2, 6, 2, 0, 2,\n",
        "        2, 3, 5, 5, 2, 4, 8, 3, 1, 1,\n",
        "        3, 2, 7, 4, 2\n",
        "    ],\n",
        "    'region': [\n",
        "        'North', 'South', 'West', 'East', 'South', 'North', 'West', 'East', 'South', 'North',\n",
        "        'North', 'South', 'West', 'East', 'South', 'North', 'West', 'East', 'South', 'North',\n",
        "        'North', 'South', 'West', 'East', 'South', 'North', 'West', 'East', 'South', 'North',\n",
        "        'North', 'South', 'West', 'East', 'South', 'North', 'West', 'East', 'South', 'North',\n",
        "        'North', 'South', 'West', 'East', 'South', 'North', 'West', 'East', 'South', 'North',\n",
        "        'North', 'South', 'West', 'East', 'South', 'North', 'West', 'East', 'South', 'North',\n",
        "        'North', 'South', 'West', 'East', 'South', 'North', 'West', 'East', 'South', 'North',\n",
        "        'North', 'South', 'West', 'East', 'South', 'North', 'West', 'East', 'South', 'North',\n",
        "        'North', 'South', 'West', 'East', 'South'\n",
        "    ],\n",
        "    'churn': [\n",
        "        0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
        "        0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
        "        0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
        "        0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
        "        0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
        "        0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
        "        0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
        "        0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
        "        0, 0, 1, 1, 1\n",
        "    ]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "X = df[['age', 'monthly_usage_hours', 'purchase_amount', 'customer_service_calls',\n",
        "'region']]\n",
        "y = df['churn']\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "transformers=[\n",
        "('num', StandardScaler(), ['age', 'monthly_usage_hours', 'purchase_amount',\n",
        "'customer_service_calls']),\n",
        "('cat', OneHotEncoder(sparse_output=False), ['region'])\n",
        "])\n",
        "\n",
        "model = Pipeline(steps=[\n",
        "('preprocessor', preprocessor),\n",
        "('classifier', LogisticRegression(random_state=42))\n",
        "])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n",
        "random_state=42)\n",
        "\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "new_customer = pd.DataFrame({\n",
        "'age': [35],\n",
        "'monthly_usage_hours': [20],\n",
        "'purchase_amount': [150],\n",
        "'customer_service_calls': [5],\n",
        "'region': ['West']\n",
        "})\n",
        "churn_probability = model.predict_proba(new_customer)[0][1]\n",
        "\n",
        "threshold = 0.75\n",
        "churn_prediction = 1 if churn_probability > threshold else 0\n",
        "print(f\"Churn Probability for new customer: {churn_probability:.2f}\")\n",
        "print(f\"Churn Prediction (1 = churn, 0 = no churn): {churn_prediction}\")\n",
        "\n",
        "feature_names = (model.named_steps['preprocessor']\n",
        ".named_transformers_['cat']\n",
        ".get_feature_names_out(['region'])).tolist() + ['age',\n",
        "'monthly_usage_hours', 'purchase_amount', 'customer_service_calls']\n",
        "coefficients = model.named_steps['classifier'].coef_[0]\n",
        "print(\"\\nModel Coefficients:\")\n",
        "for feature, coef in zip(feature_names, coefficients):\n",
        "    print(f\"{feature}: {coef:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RsfKpkXJmGTe",
        "outputId": "5fa8d5bd-04a1-47b1-94c0-78cb80a58291"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Churn Probability for new customer: 0.21\n",
            "Churn Prediction (1 = churn, 0 = no churn): 0\n",
            "\n",
            "Model Coefficients:\n",
            "region_East: 0.01\n",
            "region_North: 0.81\n",
            "region_South: 0.10\n",
            "region_West: 0.40\n",
            "age: 1.76\n",
            "monthly_usage_hours: 0.14\n",
            "purchase_amount: -1.20\n",
            "customer_service_calls: -0.68\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#I couldn't find a source so I used chatgpt to provide me a realistic dataset with the provided columns\n",
        "#https://chatgpt.com/\n",
        "\n",
        "data = {\n",
        "    'annual_spending': [\n",
        "        1200, 4500, 3800, 5200, 6500, 2700, 8300, 5900, 2900, 4200,\n",
        "        1250, 4600, 3900, 5300, 6600, 2800, 8200, 6000, 3000, 4300,\n",
        "        1300, 4700, 3850, 5400, 6700, 2750, 8100, 6100, 3100, 4400,\n",
        "        1350, 4800, 3950, 5500, 6800, 2650, 8000, 6200, 3200, 4500,\n",
        "        1400, 4900, 4000, 5600, 6900, 2600, 7900, 6300, 3300, 4600,\n",
        "        1450, 5000, 4050, 5700, 7000, 2550, 7800, 6400, 3400, 4700,\n",
        "        1500, 5100, 4100, 5800, 7100, 2500, 7700, 6500, 3500, 4800,\n",
        "        1550, 5200, 4200, 5900, 7200, 2450, 7600, 6600, 3600, 4900,\n",
        "        1600, 5300, 4300, 6000, 7300\n",
        "    ],\n",
        "    'purchase_frequency': [\n",
        "        8, 15, 12, 20, 10, 5, 18, 22, 7, 14,\n",
        "        9, 16, 13, 21, 11, 6, 17, 23, 8, 15,\n",
        "        10, 14, 11, 19, 9, 5, 16, 24, 7, 13,\n",
        "        11, 17, 12, 20, 10, 6, 18, 22, 8, 14,\n",
        "        12, 18, 13, 21, 11, 5, 19, 23, 9, 15,\n",
        "        13, 19, 14, 22, 10, 6, 20, 24, 10, 16,\n",
        "        14, 20, 12, 21, 12, 5, 18, 23, 11, 17,\n",
        "        15, 22, 13, 22, 9, 6, 17, 24, 10, 18,\n",
        "        16, 23, 14, 21, 11\n",
        "    ],\n",
        "    'age': [\n",
        "        22, 35, 47, 29, 54, 41, 63, 30, 50, 38,\n",
        "        23, 36, 48, 30, 55, 42, 62, 31, 49, 39,\n",
        "        24, 37, 46, 32, 56, 40, 61, 33, 51, 36,\n",
        "        25, 38, 45, 33, 57, 39, 60, 34, 52, 35,\n",
        "        26, 39, 44, 34, 58, 38, 59, 35, 53, 36,\n",
        "        27, 40, 43, 35, 59, 37, 58, 36, 54, 37,\n",
        "        28, 41, 42, 36, 60, 38, 57, 37, 55, 39,\n",
        "        29, 42, 41, 38, 61, 39, 56, 38, 56, 40,\n",
        "        30, 43, 40, 39, 62\n",
        "    ],\n",
        "    'region': [\n",
        "        'East', 'West', 'North', 'South', 'East', 'West', 'NOrth', 'South', 'East', 'West',\n",
        "        'East', 'West', 'North', 'South', 'East', 'West', 'North', 'South', 'East', 'West',\n",
        "        'East', 'West', 'North', 'South', 'East', 'West', 'North', 'South', 'East', 'West',\n",
        "        'East', 'West', 'North', 'South', 'East', 'West', 'North', 'South', 'East', 'West',\n",
        "        'East', 'West', 'North', 'South', 'East', 'West', 'North', 'South', 'East', 'West',\n",
        "        'East', 'West', 'North', 'South', 'East', 'West', 'North', 'South', 'East', 'West',\n",
        "        'East', 'West', 'North', 'South', 'East', 'West', 'North', 'South', 'East', 'West',\n",
        "        'East', 'West', 'North', 'South', 'East', 'West', 'North', 'South', 'East', 'West',\n",
        "        'East', 'West', 'North', 'South', 'East'\n",
        "    ]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "features = ['annual_spending', 'purchase_frequency', 'age']\n",
        "X = df[features]\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "inertia = []\n",
        "K = range(1, 6)\n",
        "for k in K:\n",
        "    kmeans = KMeans(n_clusters=k, random_state=42)\n",
        "    kmeans.fit(X_scaled)\n",
        "    inertia.append(kmeans.inertia_)\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(K, inertia, 'bo-')\n",
        "plt.xlabel('Number of Clusters (K)')\n",
        "plt.ylabel('Inertia')\n",
        "plt.title('Elbow Method for Optimal K')\n",
        "plt.savefig('elbow_plot.png')\n",
        "plt.close()\n",
        "\n",
        "optimal_k = 3\n",
        "kmeans = KMeans(n_clusters=optimal_k, random_state=42)\n",
        "df['cluster'] = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "cluster_summary = df.groupby('cluster')[features].mean().round(2)\n",
        "print(\"Cluster Characteristics:\")\n",
        "print(cluster_summary)\n",
        "\n",
        "for cluster in range(optimal_k):\n",
        "    print(f\"\\nCluster {cluster} Strategy:\")\n",
        "    if cluster_summary.loc[cluster, 'annual_spending'] > 1500:\n",
        "        print(\"High-spending customers: Offer exclusive promotions or loyalty rewards.\")\n",
        "    elif cluster_summary.loc[cluster, 'purchase_frequency'] > 15:\n",
        "        print(\"Frequent buyers: Provide bulk discounts or subscription plans.\")\n",
        "    else:\n",
        "        print(\"Low-engagement customers: Send personalized re-engagement campaigns.\")\n",
        "\n",
        "df.to_csv('customer_segments.csv', index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T7-YBLXwoPZ3",
        "outputId": "4756e184-01f3-4692-f5ab-a41f67d09a1e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cluster Characteristics:\n",
            "         annual_spending  purchase_frequency    age\n",
            "cluster                                            \n",
            "0                5384.38               19.72  36.16\n",
            "1                2898.61               10.08  39.94\n",
            "2                7394.12               13.88  58.71\n",
            "\n",
            "Cluster 0 Strategy:\n",
            "High-spending customers: Offer exclusive promotions or loyalty rewards.\n",
            "\n",
            "Cluster 1 Strategy:\n",
            "High-spending customers: Offer exclusive promotions or loyalty rewards.\n",
            "\n",
            "Cluster 2 Strategy:\n",
            "High-spending customers: Offer exclusive promotions or loyalty rewards.\n"
          ]
        }
      ]
    }
  ]
}